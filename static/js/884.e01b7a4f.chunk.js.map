{"version":3,"file":"static/js/884.e01b7a4f.chunk.js","mappings":"2RAAA,SAASA,EAAEC,GAAG,IAAIC,EAAEC,EAAEC,EAAE,GAAG,GAAG,iBAAiBH,GAAG,iBAAiBA,EAAEG,GAAGH,OAAO,GAAG,iBAAiBA,EAAE,GAAGI,MAAMC,QAAQL,GAAG,IAAIC,EAAE,EAAEA,EAAED,EAAEM,OAAOL,IAAID,EAAEC,KAAKC,EAAEH,EAAEC,EAAEC,OAAOE,IAAIA,GAAG,KAAKA,GAAGD,QAAQ,IAAID,KAAKD,EAAEA,EAAEC,KAAKE,IAAIA,GAAG,KAAKA,GAAGF,GAAG,OAAOE,CAAE,CAA0H,MAAnH,WAAgB,IAAI,IAAIH,EAAEC,EAAEC,EAAE,EAAEC,EAAE,GAAGD,EAAEK,UAAUD,SAASN,EAAEO,UAAUL,QAAQD,EAAEF,EAAEC,MAAMG,IAAIA,GAAG,KAAKA,GAAGF,GAAG,OAAOE,CAAE,E,k7hBCErVK,GAAaC,GAAAA,EAAAA,KAAH,2HAQVC,GAAcD,GAAAA,EAAAA,MAAH,mTAiBXE,GAAcF,GAAAA,EAAAA,MAAH,+KAWXG,GAAeH,GAAAA,EAAAA,OAAH,iU,UCnBnBI,GAASC,GAAAA,KAAaC,MAAM,CAC9BC,KAAMF,GAAAA,KAELG,IAAI,IACJC,QARa,yHAQM,CAChBC,QAAS,2IAEZC,SAAS,oBACVC,MAAOP,GAAAA,KAENQ,IAAI,GACJJ,QAbc,6EAaM,CACjBC,QAAS,iGAEZC,SAAS,uBAGDG,GAAc,WAAO,IAAD,IACjBC,GAAaC,EAAAA,EAAAA,MAAnBC,KACR,GAAqBC,EAAAA,EAAAA,MAAdC,GAAP,eAEA,GAKMC,EAAAA,GAAAA,IAAQ,CACVC,cAAe,CACbd,KAAM,GACNK,MAAO,IAETU,UAAUC,EAAAA,GAAAA,GAAYnB,IACtBoB,KAAM,cAVNC,EADJ,EACIA,SACAC,EAFJ,EAEIA,aACaC,EAHjB,EAGIC,UAAaD,OACbE,EAJJ,EAIIA,MAWGC,EAAa,mCAAG,WAAMb,GAAN,4EACfc,EAAgBd,EAAKV,KAAKyB,cAC1BC,EAAkBhB,EAAKL,OAE1BG,EAASmB,MAAK,SAAAC,GAAI,OAAIA,EAAK5B,KAAKyB,gBAAkBD,CAAhC,IAJA,yCAKZK,EAAAA,KAAA,UAAcnB,EAAKV,KAAnB,kCALY,WAOlBQ,EAASmB,MAAK,SAAAC,GAAI,OAAIA,EAAKvB,QAAUqB,CAAnB,IAPA,yCAQZG,EAAAA,KAAA,UAAcnB,EAAKL,MAAnB,kCARY,iCAWbO,EAAWF,GAXE,QAYnBmB,EAAAA,KAAW,gDACXP,IAbmB,kDAenBO,EAAAA,MAAY,iDAfO,0DAAH,sDAmBlB,OACG,WAACrC,GAAD,CAAYsC,SAAUX,EAAaI,GAAnC,WACC,WAAC7B,GAAD,WAAa,QAEX,UAACC,IAAD,QACEoC,KAAK,OACLC,YAAY,uBACZC,aAAa,OACTf,EAAS,UAEdE,EAAOpB,OAAQ,oCAAMoB,EAAOpB,YAAb,aAAM,EAAaG,cAErC,WAACT,GAAD,WAAa,SAEX,UAACC,IAAD,QACEoC,KAAK,MACLC,YAAY,wBACZC,aAAa,OACTf,EAAS,WAEdE,EAAOf,QAAS,oCAAMe,EAAOf,aAAb,aAAM,EAAcF,cAEvC,UAACP,GAAD,CAAcmC,KAAK,SAAnB,SAA4B,kBAGnC,E,UCjGYG,GAAOzC,GAAAA,EAAAA,GAAH,yJCAJ0C,GAAW1C,GAAAA,EAAAA,GAAH,gPASF,YACf,OAD8B,EAAZ2C,MACLC,iBACd,IACS,YACR,OADuB,EAAZD,MACEE,YACd,IAGU1C,GAAeH,GAAAA,EAAAA,OAAH,mTAIH,YAClB,OADiC,EAAZ2C,MACRG,OAAOC,qBACrB,IACgB,YACf,OAD8B,EAAZJ,MACLK,kBACd,IACS,YACR,OADuB,EAAZL,MACEE,YACd,IC1BUI,GAAc,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAI3C,EAAiB,EAAjBA,KAAMK,EAAW,EAAXA,MACnC,GAAwBuC,EAAAA,EAAAA,MAAjBC,GAAP,eAEMC,EAAe,mCAAG,WAAOC,EAAWC,GAAlB,0FAEdH,EAAcE,GAFA,OAGpBlB,EAAAA,KAAA,UAAcmB,EAAd,uBAHoB,+CAKpBnB,EAAAA,MAAA,+BAAoCmB,EAApC,qBALoB,wDAAH,wDASzB,OACI,WAACb,GAAD,YACI,0BAAInC,EAAK,MAAIK,MACb,UAAC,GAAD,CAAc0B,KAAK,SACnBkB,QAAS,kBAAMH,EAAgBH,EAAI3C,EAA1B,EADT,SAC0C,aAKjD,ECpBM,SAASkD,KAEd,IAAMC,GAAcC,EAAAA,GAAAA,MAET5C,GAAYC,EAAAA,EAAAA,MAAlBC,KAkBD2C,GAhBsBC,EAAAA,EAAAA,UAC1B,kBAAM,WACJ,GAAK9C,EAAL,CAIA,IAAM+C,EAAmBJ,EAAY1B,cAAc+B,OAEnD,OAAOhD,EAASiD,QACd,SAAAC,GAAO,OACLA,EAAQ1D,KAAKyB,cAAckC,SAASJ,IACpCG,EAAQE,OAAOD,SAASJ,EAFnB,GALR,CASF,CAZD,GAaA,CAAC/C,EAAU2C,GAEYU,GACvB,OACE,UAAC3B,GAAD,UACGmB,GAEDA,EAAiBS,KAAI,YAA0B,IAAvBnB,EAAsB,EAAtBA,GAAI3C,EAAkB,EAAlBA,KAAMK,EAAY,EAAZA,MAChC,OAAO,UAACqC,GAAD,CAAsBC,GAAIA,EAAI3C,KAAMA,EAAMK,MAAOA,GAA/BsC,EAC1B,KAGN,C,qDCnCYjD,GAAcD,GAAAA,EAAAA,MAAH,gFAMXE,GAAcF,GAAAA,EAAAA,MAAH,gHAIP,YACb,OAD4B,EAAZ2C,MACHC,iBACd,IACS,YACR,OADuB,EAAZD,MACEE,YACd,ICbUyB,GAAS,WACtB,IAAMC,GAAWC,EAAAA,GAAAA,MACXR,GAASL,EAAAA,GAAAA,MAEf,OACI,WAAC,GAAD,WAAa,0BACT,UAAC,GAAD,CACApD,KAAK,SACL+B,KAAK,OACLmC,SAAU,SAAAlF,GAAC,OAAIgF,GAASG,EAAAA,GAAAA,IAAUnF,EAAEoF,cAAcC,OAAvC,EACXA,MAAQZ,MAGf,EChBYa,GAAU,SAAC,GAAe,IAAdnE,EAAa,EAAbA,QACzB,OACI,iCAAE,wBACGA,KAIR,E,WCNYoE,GAAY9E,GAAAA,EAAAA,IAAH,8FAMT+E,GAAoB/E,GAAAA,EAAAA,IAAH,4HAoCjBgF,IAfQhF,GAAAA,EAAAA,GAAH,8IAeKA,GAAAA,EAAAA,QAAH,kCA5BQ,kBAAMiF,EAAAA,GAAAA,IAAL,SAAD,0VAgCfC,GAAelF,GAAAA,EAAAA,GAAH,kCAXQ,kBAAMiF,EAAAA,GAAAA,IAAL,KAAD,qGCcjC,GArCkB,WACd,IACQlE,GACJC,EAAAA,EAAAA,MADFC,KAWF,OACI,WAAC6D,GAAD,YACF,WAACC,GAAD,YACE,WAACC,GAAD,YACE,UAACE,GAAD,UAAc,iBACd,UAACpE,GAAD,QAEF,WAACkE,GAAD,YACE,UAACE,GAAD,UAAc,aACK,IAjBH,WAClB,OAAInE,EAGGA,EAASlB,OAFL,CAId,GAYO,mCACE,UAACyE,GAAD,KACA,UAACb,GAAD,QAGF,UAACoB,GAAD,CAASnE,QAAQ,mFAIvB,UAAC,EAAD,MAGL,C","sources":["../node_modules/clsx/dist/clsx.m.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Message/Message.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}export function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","import styled from '@emotion/styled';\n\nexport const StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 30px;\n  width: 65%;\n`;\n\nexport const StyledLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 18px;\n  div {\n    padding: 8px;\n    border: 2px solid red;\n    border-radius: 8px;\n    background-color: #ffc4c4;\n    width: 288px;\n    font-size: 14px;\n    &::first-letter {\n      text-transform: uppercase;\n    }\n  }\n`;\n\nexport const StyledInput = styled.input`\n  width: 300px;\n  height: 40px;\n  font-size: 16px;\n  border-radius: 8ps;\n  border: 2px solid red;\n  &::placeholder {\n    font-size: 16px;\n  }\n`;\n\nexport const StyledButton = styled.button`\n  width: 150px;\n  height: 40px;\n  transform: scale(1);\n  background-color: #defff5;\n  border-radius:8px;\n  border: 2px solid red;\n  font-size: 16px;\n  transition: transform 250ms ease-out, background-color 250ms ease-out;\n  &:hover,\n  &:focus-visible {\n    transform: scale(1.1);\n  }\n`;","import {\n  useAddContactMutation,\n  useFetchContactsQuery,\n} from 'services/contactsApi';\nimport {toast} from 'react-toastify';\nimport {useForm} from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport {\n    StyledLabel,\n    StyledForm,\n    StyledInput,\n    StyledButton,\n  } from './ContactForm.styled';\n\nconst nameRegex = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n\nconst phoneRegex = /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\n\nconst schema = yup.object().shape({\n    name: yup\n    .string()\n    .max(30)\n    .matches(nameRegex, {\n        message: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    })\n    .required('Name is required'),\n    phone: yup\n    .string()\n    .min(3)\n    .matches(phoneRegex, {\n        message: \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n    })\n    .required('Number is reqired')\n})\n\nexport const ContactForm = () => {\n  const { data: contacts } = useFetchContactsQuery();\n  const [addContact] = useAddContactMutation();\n\n  const {\n      register, \n      handleSubmit,\n      formState: { errors},\n      reset,\n    } = useForm({\n      defaultValues: {\n        name: '',\n        phone: '',\n      },\n      resolver: yupResolver(schema),\n      mode: 'onTouched',\n    })\n  \n\n   const addNewContact = async data => {\n    const normalizeName = data.name.toLowerCase();\n    const normalizedphone = data.phone;\n\n    if(contacts.find(item => item.name.toLowerCase() === normalizeName)) {\n      return toast.info(`${data.name} has alredy in your contacts`);\n    };\n    if(contacts.find(item => item.phone === normalizedphone)) {\n      return toast.info(`${data.phone} has alredy in your contacts`);\n    };\n    try{\n      await addContact(data);\n      toast.info('New contact has been added to your phonebook')\n      reset();\n    }catch(error) {\n      toast.error('Something is wrong. New contact was not added')\n    }\n   };\n\n    return (\n       <StyledForm onSubmit={handleSubmit(addNewContact)}>\n        <StyledLabel>\n          Name\n          <StyledInput\n            type=\"text\"\n            placeholder=\"Enter a contact name\"\n            autoComplete=\"off\"\n            {...register('name')}\n          />\n          {errors.name && <div>{errors.name?.message}</div>}\n        </StyledLabel>\n        <StyledLabel>\n          Phone\n          <StyledInput\n            type=\"tel\"\n            placeholder=\"Enter a contact phone\"\n            autoComplete=\"off\"\n            {...register('phone')}\n          />\n          {errors.phone && <div>{errors.phone?.message}</div>}\n        </StyledLabel>\n        <StyledButton type=\"submit\">Add contact</StyledButton>\n      </StyledForm>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  overflow: auto;\n`;","import styled from '@emotion/styled';\n\nexport const ListItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 400px;\n  height: 40px;\n  padding: 5px;\n  font-size: 16px;\n  background-color: white;\n  border-radius: ${({ theme }) => {\n    return theme.inputBorderRadius;\n  }};\n  border: ${({ theme }) => {\n    return theme.buttonBorder;\n  }};\n`;\n\nexport const StyledButton = styled.button`\n  width: 70px;\n  height: 40px;\n  transform: scale(1);\n  background-color: ${({ theme }) => {\n    return theme.colors.buttonBackgroundColor;\n  }};\n  border-radius: ${({ theme }) => {\n    return theme.buttonBorderRadius;\n  }};\n  border: ${({ theme }) => {\n    return theme.buttonBorder;\n  }};\n  font-size: 16px;\n  transition: transform 250ms ease-out, background-color 250ms ease-out;\n  &:hover,\n  &:focus-visible {\n    transform: scale(1.1);\n  }\n`;","import PropTypes from 'prop-types'\nimport { toast } from 'react-toastify';\nimport { useDeleteContactMutation } from 'services/contactsApi';\nimport { ListItem, StyledButton } from './ContactItem.styled'\n\nexport const ContactItem = ({id, name, phone}) => {\n    const [deleteContact] = useDeleteContactMutation();\n\n    const contactDeleteOf = async (contactId, contactName) => {\n     try {\n        await deleteContact(contactId);\n        toast.info(`${contactName} has been deleted `);\n     } catch (error) {\n        toast.error(`Something was wrong, ${contactName} was not deleted`)\n     }\n\n    }\nreturn (\n    <ListItem>\n        <p>{name} : {phone}</p>\n        <StyledButton type=\"button\" \n        onClick={() => contactDeleteOf(id, name)}>\n            Delete\n        </StyledButton>\n    </ListItem>\n);\n}\n\nContactItem.propTypes ={\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n\n}","import { useMemo } from 'react';\nimport { useFilterValue } from 'hooks';\nimport { useFetchContactsQuery } from 'services/contactsApi';\nimport { List } from './ContactList.styled'\nimport { ContactItem } from 'components/ContactItem/ContactItem'\n\nexport function ContactList() {\n \n  const filterValue = useFilterValue();\n\nconst {data: contacts} = useFetchContactsQuery();\n\nconst getFilteredContacts = useMemo(\n  () => () => {\n    if (!contacts) {\n      return;\n    }\n\n    const normalizedFilter = filterValue.toLowerCase().trim();\n\n    return contacts.filter(\n      contact =>\n        contact.name.toLowerCase().includes(normalizedFilter) ||\n        contact.number.includes(normalizedFilter)\n    );\n  },\n  [contacts, filterValue]\n);\nconst filteredContacts = getFilteredContacts();\n  return (\n    <List>\n      {filteredContacts \n      && \n      filteredContacts.map(({ id, name, phone }) => {\n        return <ContactItem key={id} id={id} name={name} phone={phone} />;\n      })}\n    </List>\n  );\n}","import styled from '@emotion/styled';\n\n\nexport const StyledLabel = styled.label`\ndisplay: flex;\nflex-direction: column;\ngap: 18px;\n`;\n\nexport const StyledInput = styled.input`\nwidht: 300px;\nheight: 34px;\nfont-size: 16px;\nborder-radius: ${({ theme }) => {\n    return theme.inputBorderRadius;\n  }};\n  border: ${({ theme }) => {\n    return theme.buttonBorder;\n  }};\n`;","import { useDispatch } from 'react-redux';\nimport { setFilter} from 'redux/filter/filtersSlice';\nimport { useFilterValue } from 'hooks';\nimport { StyledLabel, StyledInput } from './Filter.styled';\n\nexport const Filter = () => {\nconst dispatch = useDispatch();\nconst filter = useFilterValue();\n\nreturn (\n    <StyledLabel> Find contacts by name\n        <StyledInput \n        name=\"filter\"\n        type=\"text\"\n        onChange={e => dispatch(setFilter(e.currentTarget.value))}\n        value ={filter}/>\n    </StyledLabel>\n)\n}\n","import PropTypes from 'prop-types'\n\nexport const Message = ({message}) => {\nreturn (\n    <><p>\n        {message}\n    </p>\n    </>\n)\n}\n\nMessage.propTypes = {\n    message: PropTypes.string.isRequired\n}\n\n","import styled from '@emotion/styled';\nimport { css } from '@emotion/react';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 30px;\n`;\n\nexport const SectionsContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 40px;\n  justify-content: center;\n  flex-grow: 1;\n`;\n\nconst sectionDynamicStyle = () => css`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 30px;\n  max-width: 500px;\n  min-height: 570px;\n  padding: 20px;\n  background-color: #baf8e4;\n  border-radius: 8px;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\n\nexport const Title = styled.h1`\n  margin-top: 0;\n  margin-bottom: 40px;\n  text-align: center;\n  font-size: 32px;\n  text-transform: uppercase;\n`;\n\nconst sectionTitleDynamicStyle = () => css`\n  margin: 0;\n  text-align: center;\n  font-size: 28px;\n  color: #01465d;\n`;\n\nexport const Section = styled.section`\n  ${sectionDynamicStyle}\n`;\n\nexport const SectionTitle = styled.h2`\n  ${sectionTitleDynamicStyle}\n`;","import { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { ContactList } from \"components/ContactList/ContactList\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { useFetchContactsQuery } from \"services/contactsApi\";\nimport { Message } from \"components/Message/Message\";\nimport { ToastContainer } from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport {\n    Container,\n    SectionsContainer,\n    Section,\n    SectionTitle,\n  } from './Contacts.styled';\n\n\n const Contacts = () => {\n    const {\n      data: contacts,\n    } = useFetchContactsQuery();\n\n    const totalContacts = () => {\n        if(!contacts) {\n            return 0;\n        }\n        return contacts.length;\n\n    }\n\n    return (\n        <Container>\n      <SectionsContainer>\n        <Section>\n          <SectionTitle>Add contact</SectionTitle>\n          <ContactForm />\n        </Section>\n        <Section>\n          <SectionTitle>Contacts</SectionTitle>\n          {totalContacts !== 0 ? (\n            <>\n              <Filter />\n              <ContactList />\n            </>\n          ) : (\n            <Message message=\"There are no contacts in your Phonebook. Please add your first contact!\" />\n          )}\n        </Section>\n      </SectionsContainer>\n      <ToastContainer/>\n    </Container>\n    );\n}\n\nexport default Contacts;"],"names":["r","e","t","f","n","Array","isArray","length","arguments","StyledForm","styled","StyledLabel","StyledInput","StyledButton","schema","yup","shape","name","max","matches","message","required","phone","min","ContactForm","contacts","useFetchContactsQuery","data","useAddContactMutation","addContact","useForm","defaultValues","resolver","yupResolver","mode","register","handleSubmit","errors","formState","reset","addNewContact","normalizeName","toLowerCase","normalizedphone","find","item","toast","onSubmit","type","placeholder","autoComplete","List","ListItem","theme","inputBorderRadius","buttonBorder","colors","buttonBackgroundColor","buttonBorderRadius","ContactItem","id","useDeleteContactMutation","deleteContact","contactDeleteOf","contactId","contactName","onClick","ContactList","filterValue","useFilterValue","filteredContacts","useMemo","normalizedFilter","trim","filter","contact","includes","number","getFilteredContacts","map","Filter","dispatch","useDispatch","onChange","setFilter","currentTarget","value","Message","Container","SectionsContainer","Section","css","SectionTitle"],"sourceRoot":""}